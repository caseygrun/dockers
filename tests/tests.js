// Generated by CoffeeScript 1.6.3
(function() {
  var QUnit, dockers, fs, q;

  fs = require('fs');

  if (typeof QUnit === "undefined" || QUnit === null) {
    QUnit = require('qunit-cli');
  }

  q = QUnit;

  q.module('dockers');

  dockers = require('../index');

  q.test('pipeline', function() {
    var text1, text2;
    text1 = "* Metadata: `[[metadata]]`\n* Categories: `[[#category]]`\n* Replacements: `{{replacement}}`\n	* Transclusion: `{{>page}}`\n	* Templates: `{{template|option1|option2|named_option=value}}`\n	* Alternatively:";
    q.stop();
    dockers.pipeline(text1, 'markdown', 'html', [], [
      function(tree, cb) {
        q.ok(tree, 'A tree is passed to the first middleware');
        return cb(null, tree);
      }
    ], function(err, html) {
      q.ok(err == null, 'No error is raised in the pipeline');
      q.ok(html != null, 'Some HTML is returned');
      return q.start();
    });
    text2 = "[Test wikilink]()";
    q.stop();
    return dockers.pipeline(text2, 'markdown', 'html', [], [
      function(tree, cb) {
        console.log(tree[1]);
        tree[1][0].Para[0].Link[1][0] = "/pages/Test%20wikilink.md/view";
        return cb(null, tree);
      }
    ], function(err, html) {
      q.ok(err == null, 'No error is raised in the pipeline');
      q.ok(html != null, 'Some HTML is returned');
      q.equal(html, '<p><a href="/pages/Test%20wikilink.md/view">Test wikilink</a></p>\n', 'Returned HTML is correct');
      return q.start();
    });
  });

  q.test('convertFile', function() {
    var text1;
    text1 = "* Metadata: `[[metadata]]`\n* Categories: `[[#category]]`\n* Replacements: `{{replacement}}`\n	* Transclusion: `{{>page}}`\n	* Templates: `{{template|option1|option2|named_option=value}}`\n	* Alternatively:";
    q.stop();
    return dockers.convertFile(text1, 'markdown', 'docx', [], function(err, filename) {
      q.ok(err == null, 'No error on conversion');
      if (err) {
        console.log(err);
      }
      q.ok(filename != null, 'Temporary filename generated');
      q.ok(fs.existsSync(filename), 'File at filename exists');
      return q.start();
    });
  });

}).call(this);
